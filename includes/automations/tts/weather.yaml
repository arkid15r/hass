- id: tts_garden_watering_reminder
  alias: 'TTS: Garden Watering Reminder'
  trigger:
    - platform: time
      at:
        - '08:50:00'
        - '12:50:00'
  condition:
    - condition: state
      entity_id: binary_sensor.garden_season
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: time
              before: '12:00'
          sequence:
            - event: tts
              event_data:
                areas_on:
                  - great_room
                text: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>Just FYI, the morning garden watering is starting soon. Please make sure that all irrigation valves are in an expected state. Thank you!

        - conditions:
            - condition: time
              after: '12:00'
          sequence:
            - event: tts
              event_data:
                areas_on:
                  - great_room
                text: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>Just FYI, the afternoon garden watering is starting soon. Please make sure that all irrigation valves are in an expected state. Thank you!

- id: tts_porch_cooling_station_reminder
  alias: 'TTS: Porch Cooling Station Reminder'
  trigger:
    - platform: time
      at: '10:50:00'
  condition:
    - condition: numeric_state
      entity_id: sensor.temperature_forecast
      above: input_number.weather_extreme_temperature
    - condition: state
      entity_id: binary_sensor.pickup_day_today
      state: 'on'
  action:
    - event: tts
      event_data:
        text: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>Just FYI, the forecasted temperature is extremely high. A porch cooling station would be very appreciated by postal workers. Thank you!

- id: tts_state_air_quality_changed
  alias: 'TTS State: Air Quality Changed'
  trigger:
    - platform: state
      entity_id: sensor.air_pollution_level
      to: ['moderate', 'unhealthy', 'very unhealthy', 'hazardous']
  condition:
    - condition: state
      entity_id: binary_sensor.quite_time
      state: 'off'
    - condition: state
      entity_id: input_boolean.mode_nap
      state: 'off'
    - condition: state
      entity_id: input_boolean.play_tts_messages
      state: 'on'
    - condition: template
      value_template: >
        {{ trigger.from_state.state != 'unavailable' }}
    - condition: template
      value_template: >
        {{ trigger.to_state.state != 'unavailable' }}
  action:
    - event: tts
      event_data:
        text: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>The air pollution level changed from {{ trigger.from_state.state }} to {{ trigger.to_state.state }}. Sincerely yours, <phoneme alphabet="ipa" ph="ɹus'lanə 'pɪ:sə:nka">Ruslana Pysanka</phoneme>.

- id: tts_state_weather_changed
  alias: 'TTS State: Weather Changed'
  trigger:
    - platform: state
      entity_id: sensor.weather_state
      to:
        - hail
        - lightning
        - lightning-rainy
        - pouring
        - rainy
        - snowy
        - snowy-rainy
        - windy
  condition:
    - condition: state
      entity_id: binary_sensor.quite_time
      state: 'off'
    - condition: state
      entity_id: input_boolean.mode_nap
      state: 'off'
    - condition: state
      entity_id: input_boolean.play_tts_messages
      state: 'on'
    - condition: template
      value_template: >
        {{ trigger.from_state.state != 'unavailable' }}
    - condition: template
      value_template: >
        {{ trigger.to_state.state != 'unavailable' }}
  action:
    - event: tts
      event_data:
        text: >
          <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>The weather changed to {{ states('sensor.weather_state') }}. {{ states('sensor.weather_state_details') }}. Sincerely yours, <phoneme alphabet="ipa" ph="ɹus'lanə 'pɪ:sə:nka">Ruslana Pysanka</phoneme>.

- id: tts_weather_forecast
  alias: 'TTS: Weather Forecast'
  trigger:
    - platform: time
      at: '19:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.play_tts_messages
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: sensor.weather_forecast_summary
              state: unavailable
          sequence:
            - event: tts
              event_data:
                text: >
                  <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>
                  Just FYI: I was going to announce the weather forecast for tomorrow
                  but it's unavailable at this moment. Please make sure to check it when
                  you have a chance.
        - conditions:
            - condition: state
              entity_id: binary_sensor.garden_season
              state: 'off'
          sequence:
            - event: tts
              event_data:
                text: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>Here is your weather forecast for tomorrow. {{ states('sensor.weather_forecast_details') }}. Sincerely yours, <phoneme alphabet='ipa' ph="ɹus'lanə 'pɪ:sə:nka">Ruslana Pysanka</phoneme>.
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: sensor.weather_forecast_summary
                  state: fine
          sequence:
            - event: tts
              event_data:
                duration: 30
                text: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>Hey gardeners, the weather forecast looks {{ states('sensor.weather_forecast_summary') }}. {{ states('sensor.weather_forecast_details') }}. Sincerely yours, <phoneme alphabet='ipa' ph="ɹus'lanə 'pɪ:sə:nka">Ruslana Pysanka</phoneme>.

- id: tts_weather_morning_summary
  alias: 'TTS: Weather Morning Summary'
  trigger:
    - platform: time
      at: '07:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.play_tts_messages
      state: 'on'
    - condition: state
      entity_id: binary_sensor.workday
      state: 'on'
    - condition: state
      entity_id: binary_sensor.bedroom_1_blackout
      state: 'on'
  action:
    - event: tts
      event_data:
        areas_off: '*'
        areas_on:
          - bedroom_1
        text: >
          <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_05"/>Good morning! {{ states('sensor.weather_state_details') }}. Sincerely yours, <phoneme alphabet='ipa' ph="ɹus'lanə 'pɪ:sə:nka">Ruslana Pysanka</phoneme>.
