- binary_sensor:
    - name: AM
      unique_id: am
      state: >
        {{ now().strftime('%p') | lower == 'am' }}

    - name: DND
      unique_id: dnd
      state: >
        {{ is_state('binary_sensor.quite_time', 'on') or
            is_state('input_boolean.mode_nap', 'on')
        }}

    - name: Garbage Collection Today
      unique_id: garbage_collection_today
      state: >
        {{ now().strftime('%a') | lower ==
            states('input_select.gc_today_reminder_day') | lower
        }}

    - name: Garbage Collection Tomorrow
      unique_id: garbage_collection_tomorrow
      state: >
        {{ now().strftime('%a') | lower ==
            states('input_select.gc_tomorrow_reminder_day') | lower
        }}

    - name: Garden Season
      unique_id: garden_season
      state: >
        {{ as_timestamp(states('input_datetime.garden_season_start_date')) <=
            as_timestamp(now()) <=
            as_timestamp(states('input_datetime.garden_season_end_date'))
        }}

    - name: PM
      unique_id: pm
      state: >
        {{ now().strftime('%p') | lower == 'pm' }}

    - name: Quite Time
      unique_id: quite_time
      state: >
        {%- macro is_in_range(value, time_from, time_to) %}
          {%- if time_from < time_to and time_from <= value < time_to -%}
            on
          {%- elif time_from >= time_to and
                (value >= time_from or value < time_to) -%}
            on
          {%- else -%}
            off
          {%- endif -%}
        {%- endmacro -%}

        {{ is_in_range(
            now().strftime('%H:%M:%S'),
            states('input_datetime.quite_time_on'),
            states('input_datetime.quite_time_off')) == 'on'
        }}

    - name: Winter Holidays Season
      unique_id: winter_holidays_season
      state: >
        {{ as_timestamp(
                states('input_datetime.winter_holidays_season_start_date')) <=
            as_timestamp(
                now()) <=
            as_timestamp(
                states('input_datetime.winter_holidays_season_end_date'))
        }}

- sensor:
    - name: Morning Lights Time Off
      unique_id: morning_lights_time_off
      state: >
        {{ (as_timestamp(state_attr('sun.sun', 'next_rising')) |
              int + 60 * 30) | timestamp_custom('%H:%M')
        }}

    - name: Night Lights Time On
      unique_id: night_lights_time_on
      state: >
        {{ (as_timestamp(state_attr('sun.sun', 'next_setting')) |
              int - 60 * 15) | timestamp_custom('%H:%M')
        }}
