# Text To Speech Automation Blueprint.
#
# Author: Ark (ark@cho.red)

blueprint:
  name: '[TTS State]: '
  description: |
    Plays TTS message upon entity state change event.

    The automation uses [tts.py](https://github.com/arkid15r/hass-config/blob/main/appdaemon/apps/tts.py) to play the TTS message.

    Use input boolean `play_tts_messages` to enable/disable the automation globally (see Home Assistant > Configuration > Helpers section). Both `Run If/Run If State` and `Run After/Run Before` are optional. But if provided then just one of the `Run If/Run If State` **OR** `Run After/Run Before` conditions must be true in order to run the automation. `Run After/Run Before` only works when both after/before time inputs are set.

    Inputs:
      - **State Change Entity** (*optional*): an entity with 'on'/'off' state capability which state's change triggers TTS message play.
      - **State Change From** (*default*: off): A `State Change` entity before state.
      - **State Change To** (*default*: on): a `State Change` entity after state.
      - **State Change For** (*default*: 0, unit: *seconds*): an amount of time the `State Change` entity must stay in the `State Change To` state.
      - **Text**: A text to play.
      - **Areas Off** (*optional*): a list of areas where the message should not be played (see `tts.py` for more information).
      - **Run If Only** (*optional*): run the automation if the entity is in a required state (see the `Run If Only State`) only.
      - **Run If Only State** (*default: off*): a state ('on'/'off') in which the `Run If Only` entity must be to run the automation. If no `Run If Only` entity provided the `Run If Only State` is ignored.

  domain: automation
  input:
    state_change_entity:
      name: State Change Entity
      description: An entity that triggers automation
      default:
      selector:
        entity: {}

    state_change_from:
      name: State Change From
      description: When the state changes from this state
      default: '*'
      selector:
        object:

    state_change_to:
      name: State Change To
      description: To this state
      default: '*'
      selector:
        object:

    state_change_for_time_seconds:
      name: State Change For
      description: For at least this amount of time
      default: 0
      selector:
        number:
          min: 0
          max: 3600
          step: 1
          unit_of_measurement: seconds
          mode: slider

    text:
      name: Text
      description: A text to play
      selector:
        text:
          multiline: true

    areas_off:
      name: Areas Off (optional)
      description: A list of explicitly excluded areas
      default: []
      selector:
        object:

    areas_on:
      name: Areas On (optional)
      description: A list of explicitly included areas
      default: []
      selector:
        object:

    run_if:
      name: Run If Only (optional)
      description: Don't run the automation if the entity
      default:
      selector:
        entity: {}

    run_if_state:
      name: Run If Only State (optional)
      description: Is not it this state
      default:
      selector:
        text:

    run_after_time:
      name: Run After (optional)
      description: Don't run the automation before this time
      default: '00:00:00'
      selector:
        entity:
          domain: input_datetime

    run_before_time:
      name: Run Before (optional)
      description: Don't run the automation after this time
      default: '00:00:00'
      selector:
        entity:
          domain: input_datetime

variables:
  run_if: !input run_if
  run_if_state: !input run_if_state
  run_after_time: !input run_after_time
  run_before_time: !input run_before_time

trigger:
  - platform: state
    entity_id: !input state_change_entity
    from: !input state_change_from
    to: !input state_change_to
    for: !input state_change_for_time_seconds

condition:
  - "{{ states['input_boolean.play_tts_messages'].state == 'on' }}"
  - condition: or
    conditions:
      - '{{ not run_if and run_after_time == run_before_time }}'
      - '{{ run_if and run_if_state and states[run_if].state == run_if_state }}'
      - condition: and
        conditions:
          - '{{ run_after_time != run_before_time }}'
          - condition: time
            after: !input run_after_time
            before: !input run_before_time

action:
  - event: tts
    event_data:
      areas_off: !input areas_off
      areas_on: !input areas_on
      text: !input text
